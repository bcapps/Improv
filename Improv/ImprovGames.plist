<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Games</key>
	<array>
		<dict>
			<key>Image</key>
			<string>10fingers</string>
			<key>Title</key>
			<string>10 Fingers</string>
			<key>Description</key>
			<string>Great game for getting to know each other in a new group. All players in a circle, holding all 10 fingers up in the air. One person at a time, start asking personal questions that take yes-no answers, whoever cannot answer yes to a question, drops a finger. Last person with a finger left wins. Good questions are things like &quot;I have a cat&quot;, &quot;I have never stolen anything&quot; and so on.</string>
			<key>Tags</key>
			<array>
				<string>Icebreaker</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>3series</string>
			<key>Title</key>
			<string>3 Series</string>
			<key>Description</key>
			<string>Everyone in a circle. Pick a category (e.g. make of cars, girls names kinds of food, kinds of plants, whatever). First person states an example of the category, and points to someone else. Keep pointing. That someone else does the same, with a different item in the category, and so forth, until everyone points at one person. Then repeat the pattern. Make eye contact when passing your item to the next person. Drop the pointing arms when everyone is comfortable and the series is collectively memorized. Then do the same with a second category, and make sure the pointing pattern is different. Repeat till everyone is comfortable. Then do the same exercise, without pointing, and running the 2 categories at the same time. Add a third, fourth category if you wish. No pointing arms any more! The idea is not only to listen for the item right before yours in the series (so you know when it`s your turn), but also to make sure that when you pass an item to someone else, that someone else actually hears you. If not, then repeat your item, to ensure the series does not get broken.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Look and Listen</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>3some</string>
			<key>Title</key>
			<string>3 Some</string>
			<key>Description</key>
			<string>Fun warm-up. One player offers something, e.g. I am a slice of cheese. 2nd player jumps in and adds something to the offer, e.g. I am a slice of bread. 3rd player jumps in and again adds to the setup, e.g. I am a pickle. First player leaves, taking one of the others with him. Restart from the remaining player, who restarts by saying what/who she is.</string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>5</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AcceptingCircle</string>
			<key>Title</key>
			<string>Accepting Circle</string>
			<key>Description</key>
			<string>Get everyone in a big circle. One player starts by making a little gesture perhaps with a little sound. His or her neighbor then tries and does exactly the same. And so on. Although we expect the gesture/sound not to change, it will. Notes Watch for movements that suddenly change left/right arm or leg. This is not really supposed to happen, but it will. Once happened, it should be accepted by the next player. Also watch/listen for little moans or sighs that players might make before or after their turn - these should also be taken over by the next player.</string>
			<key>Tags</key>
			<array>
				<string>Accepting</string>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Narrative</string>
			<key>Title</key>
			<string>Narrative, Color, Emotion</string>
			<key>Description</key>
			<string>One players tells a story, solo. Other players tag the player if they want to hear more action (narrative), more emotion or more color. By color we mean environmental detail, as in how does it smell, temperature, weather, colors, sounds.</string>
			<key>Tags</key>
			<array>
				<string>Environment</string>
				<string>Exercise</string>
				<string>Narration</string>
				<string>Object Work</string>
				<string>Solo</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>4</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ActionSyllables</string>
			<key>Title</key>
			<string>Action Syllables</string>
			<key>Description</key>
			<string>Great warm-up that also helps a new group to learn each other&apos;s names. Everyone in a circle. First person says his name, making a gesture (an action) for every syllable. Mary has 2 syllables, so she does something like &quot;Ma-&quot; (wave right hand) &quot;-ry&quot; (claps in hands). Everyone repeats this. Then the second person calls his name, again with a gesture per syllable. Group repeats, and then repeats all previous names and syllables.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Energy</string>
				<string>Warm-up</string>
				<string>Icebreaker</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>SimpleContinuation</string>
			<key>Title</key>
			<string>Simple Continuation</string>
			<key>Description</key>
			<string>A scene is started, played by 2 to 4 players. Mid-scene the MC interrupts, and all characters are replaced by new players. The new players should take over the original characters, and stick to the story that was being developed.</string>
			<key>Tags</key>
			<array>
				<string>Continuation</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Switcheroo</string>
			<key>Title</key>
			<string>Switcheroo</string>
			<key>Description</key>
			<string>This is like Simple Continuation, except that the MC interrupts the scene several times, and at each interruption all actors in the scene get switched, no new actors join in, and no actors leave.</string>
			<key>Tags</key>
			<array>
				<string>Continuation</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Actor&apos;sNightmare</string>
			<key>Title</key>
			<string>Actor&apos;s Nightmare</string>
			<key>Description</key>
			<string>This one is played by 2 players, one of which gets their lines on paper (like a script). The other player should justify whatever the scripted player says. Notes: You can use existing plays for this, but also lines from comics. Whoever gets the script should not forget to play/act - only his/her lines are defined, not what he/she does, or how he/she does the lines.</string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
				<string>Prop</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>2</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AdjectiveScene</string>
			<key>Title</key>
			<string>Adjective Scene</string>
			<key>Description</key>
			<string>Ask for an adjective (e.g. sad). Play a scene in which the players are as sad as possible. Alternatively, give every player a different adjective.</string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>MakeMoreInteresting</string>
			<key>Title</key>
			<string>Make More Interesting</string>
			<key>Description</key>
			<string>Simple exercise, useful for players that are too verbal. One player starts a scene. As soon as the trainer claps his hands, the player needs to make whatever he was doing more interesting, without advancing. If our player was opening a briefcase at the clap, he needs to make opening a briefcase more interesting, he is not allowed to take something out of the briefcase, as that would be advancing, player needs to stick to opening the briefcase. Notes Simple to explain but not so easy to play. When done well you move into the clownesque. Think about Chaplin, Laurel Hardy or Mr. Bean.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Aerobics</string>
			<key>Title</key>
			<string>Aerobics</string>
			<key>Description</key>
			<string>This is a fun observation game. Place all players in a line. The first player starts walking around the room walking a large circle. The second player starts following the first one and tries to move like the first player. After a few rounds, the first player goes to the back of the line, and the third player starts following and imitating the second one. Notes Tell players to be themselves, don`t try and walk around funny (it`s not the Ministry of Silly Walks after all).</string>
			<key>Tags</key>
			<array>
				<string>Characters</string>
				<string>Exercise</string>
				<string>Icebreaker</string>
				<string>Look and Listen</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ThreeRules</string>
			<key>Title</key>
			<string>Three Rules</string>
			<key>Description</key>
			<string>Get 3 rules from the audience, e.g. players have only one arm, players can`t use a word that contains an `s` and after every question uttered players needs to yell `Yess!`. Players then play a scene, obeying the 3 rules. For examples of what else might be used as a rule see the other games with a Limitation Tag</string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>12</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BlindLead</string>
			<key>Title</key>
			<string>Blind Lead</string>
			<key>Description</key>
			<string>One player is blindfolded, and the room is filled with obstacles (put a couple of chairs everywhere, leave all kinds of junk on the floor). The idea is that the rest of the group will lead the blindfolded player through the room, by talking. A helpful reader offered us an explanation for the name `Airplane`: The blindfoldee (or just eyes closed) is led through a maze composed of furniture and the other actors. He is an &quot;Airplane&quot; lost in the fog being talked down by the &quot;Air Traffic Controller&quot;, who must remain in his/her &quot;Tower&quot;. Standing on a chair/rehearsal block lends visibility for the controller. The airplane also only has a limited amount of fuel left (1-3 minutes, whatever) to reach a safe landing (arriving at the Tower). The airplane is also allowed two &quot;brushes&quot;-limited contact with an obstacle. The third brush or a direct hit or stepping on something directly causes a &quot;crash&quot;. They may step around, over or under the obstacles. Also, the airplane can only fly forward. It can turn in any direction, however. The directions must be given from the pilot`s point of view, a good exercise for fledgling directors. You can also destroy all the trust you`ve built up in your class by completely clearing the deck and torturing the Pilot. Believe us someone will suggest it.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>3</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AliBaba</string>
			<key>Title</key>
			<string>Ali Baba and the 40 Thieves</string>
			<key>Description</key>
			<string>Excellent warm-up. Everyone in a circle. We are going to establish a rhythm by saying, all together `Ali Baba and the 40 Thieves`. Keep repeating this. One person starts making a gesture to this rhythm, say, tapping your head with you left hand. When the sentence is repeated, the player next to her takes over this gesture, while the first one starts a completely different new gesture. Third time the sentence is done, player three does the first gesture, player two does the second gesture and player one invents a new one again. And so on. This is also a concentration game, though it`s not really difficult. All one has to do is watch the previous player, and next time, take over her gesture. When you`re watching what everyone else is doing you`re going to get lost though.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Energy</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AlienTigerCow</string>
			<key>Title</key>
			<string>Alien Tiger Cow</string>
			<key>Description</key>
			<string>Fun game to warm up and to teach players some  Chivalry. Everyone in a circle. There are 3 things a player can be An alien: hold you index fingers up next to your head, as little antenna`s and say `Bleeb bleeb`, bending inwards into the circle A cow: bend forward, hold your right hand on your tummy and go `Moooo` A tiger: push your right hand forward, imitating a claw and roar. On your sign, every player decides to become one of the three. The idea is for everyone to become the same, which obviously won`t be the case, the first time. We re-do this until everyone is in sync. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>5</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Excluding</string>
			<key>Title</key>
			<string>Excluding</string>
			<key>Description</key>
			<string>At least 4 players play a scene, in which one of the players gets excluded. Notes This is a group exercise, in the sense that players should be sensing where the majority of the group is going (see  Alien Tiger Cow ). Tell players not to be afraid of `being nasty` - be extreme in your exclusion (that makes it easier, also for the player that is excluded - see  Mr. Nice Guy ). Whoever gets excluded should gladly accept this and react accordingly. Excluded players can go to extremes to be re-included - hilariously funny if even this is thoroughly ignored by the others.
-This game was originally created as a pattern game for long form shows at the Theatresports London Impro Lab in the late 1980`s. The whole point of the game is NOT to actively try and exclude anyone. The exclusion of one player should happen as a result of the other players making alliances with one another. If you don`t do this, the scene doesn`t form very good patterns and the players get too competitive. You also miss the slow, sliding status drops and the desperate attempts to hook into an existing alliance, that happen when a player is starting to realize that they are being excluded. A good way to start this game would be start in a black-out seated round a table While the lights are still down the entire ensemble starts to laugh (as if someone has just told the punchline to a hilarious joke) The lights slowly fade up as the cast`s laughter winds down and the alliances begin to form. By the end of the scene, which climaxes in a final, dramatic exclusion, we usually end up with four to six threads and a clear protagonist.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>3</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AlliterationIntroduction</string>
			<key>Title</key>
			<string>Alliteration Introduction</string>
			<key>Description</key>
			<string>Excellent game for players to get to know each other`s names. Everyone in a circle. A player starts the game by introducing himself by making a gesture, and alliterating to his name, e.g. &quot;I`m Wonderful Wendy&quot; or &quot;I`m Smart Steve&quot;. The next player point to the first, repeats the previous player`s name, attribute and gesture, and does something similar about himself. And so on. Game ends with the first player having to do each other player`s gesture, repeating their names and attributes.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Icebreaker</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Alliterations</string>
			<key>Title</key>
			<string>Alliterations</string>
			<key>Description</key>
			<string>You will need a tennis ball or a towel tied in a knot for this one. Everyone sitting or standing in a circle. You give one person the ball, and ask him to name as many words as possible that start with a `P` (or any other letter) in the time it takes for the ball to get passed along the circle. Doubles don`t count, obviously. Notes: Tell players not to watch the ball go round when they`re `it` - they`ll just panic and freeze. Tell them to try this with closed eyes.</string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Warm-up</string>
				<string>Prop</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AlphabetCircle</string>
			<key>Title</key>
			<string>Alphabet Circle</string>
			<key>Description</key>
			<string>Great warm-up game to sharpen concentration. Everyone in a circle. One player starts by throwing an `A` to another player. That player throws as fast as possible a `B` to someone else. And so on. If you work with a large group, you can divide them into 2 circles, call `em Team Gold and Team Silver, and time how fast they can get to `Z`.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AlphabetGame</string>
			<key>Title</key>
			<string>Alphabet Game</string>
			<key>Description</key>
			<string>This is a scene consisting of 26 lines of dialog. The first line starts with a given letter (say `R`). The reply to that line must start with a `S`, and so on, until the whole alphabet has been covered. After `Z` comes `A`. Players that hesitate, or use the wrong letter `Die`, and are replaced by another player. The replacement needs to take over the character of the player she replaces. Notes: Urge players not to `stick` to the game - if you can`t think of a good sentence to advance the story, it`s better to just `die` than to screw up the story (see  Chivalry).</string>
			<key>Tags</key>
			<array>
				<string>Die</string>
				<string>Performance</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AlphabetLetters</string>
			<key>Title</key>
			<string>Alphabet Letters</string>
			<key>Description</key>
			<string>Players in groups of 4 or 5. When a letter is called, each group forms that letter with their bodies.</string>
			<key>Tags</key>
			<array>
				<string>Energy</string>
				<string>Icebreaker</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>12</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Asides</string>
			<key>Title</key>
			<string>Asides</string>
			<key>Description</key>
			<string>An improvized scene is played, which any player can stop at any time by yelling freeze. At that point, the player steps out of the scene, and tells the audience what his character is really thinking, after which the scene continues. The other characters of course are not supposed to know what players are thinking, but the players do,and should use this.Notes: Players can use this to reveal their hidden motives. Other players can play into this, or purposely ignore this knowledge. Gimmick: characters may actually have other things on their minds than what`s going on in the scene. E.g. a driver stopped by a cop may be thinking about the groceries his wife told him to get at the supermarket.</string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AmericanIdol</string>
			<key>Title</key>
			<string>American Idol</string>
			<key>Description</key>
			<string>This is a spoof of the format of (American) Idol, the TV show in which new singers are discovered. One player is the host, another is the bad judge, and at least 2 others are candidates. Both candidates introduce themselves (or are introduced by the host) and then sing their song based on an audience suggestion. Afterwards the judge tears them apart.</string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
				<string>Sing Song</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>12</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>WhatHappensNext</string>
			<key>Title</key>
			<string>What Happens Next</string>
			<key>Description</key>
			<string>One player in the middle, the others sit aside. Any person can give the middle player a task, which she performs, and then she asks `What happens next` ? Any player may suggest what needs to happen next, but the idea is for the group to construct a coherent story. Notes: The player in the middle should only and strictly be doing what she`s told, it is up to the players at the side to construct the story.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
				<string>Narration</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Animalistics</string>
			<key>Title</key>
			<string>Animalistics</string>
			<key>Description</key>
			<string>Ask the audience for animals. Players play a scene, in which the characters are based on these animals. Notes Players do not `become` the animals, they only take over characteristics of the animals. Characteristics may be physical, vocal or  Status based. For example, `chicken` might inspire a player to a cowardly character, moving about jerkily.</string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Characters</string>
				<string>Exercise</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Animals</string>
			<key>Title</key>
			<string>Animals</string>
			<key>Description</key>
			<string>Make sure you have an even number of players. Give everyone an animal, but make sure that there are 2 of each, and that nobody knows which other player is which animal. Then give a number of activities, which the animals perform. Try Eating. Eating when you`re really hungry Drinking. Drinking when you`re really thirsty Lovemaking Grooming Fighting Sleeping At the end, ask the players to find the other animal of their kind. Ask the others if they found out who was which animal.</string>
			<key>Tags</key>
			<array>
				<string>Characters</string>
				<string>Exercise</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Armando</string>
			<key>Title</key>
			<string>Armando</string>
			<key>Description</key>
			<string>This is a long form, named after its creator, Chicago Improv teacher and player Armando Diaz. This improv format starts with a storytelling-style monologue, based on an audience suggestion. After the monologue, players play improvized scenes inspired by the monologue, and the monologue may even continue, later on in the performance.</string>
			<key>Tags</key>
			<array>
				<string>Long Form</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>HelpingHands</string>
			<key>Title</key>
			<string>Helping Hands</string>
			<key>Description</key>
			<string>A scene is played in a minimum of 2 pairs, each pair acting as one character. The first player in the pair, who does the voice, holds his hands behind his back. The second player stands behind player 1, and provides the `hands`. The story should be a give and take between voices and hands.</string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ArtistModelClay</string>
			<key>Title</key>
			<string>Artist Model Clay</string>
			<key>Description</key>
			<string>3 players. One is a lump of clay - behind her is a second player who is a model. Model takes a pose, which the `clay` is not supposed to see. The third player becomes the artist, who will model the clay after the model. The artist is not supposed to touch the clay, can`t speak and it not allowed to show the clay what to do or to become. When done, let the model inspect the artwork and see if details fit.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>3</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Assassin</string>
			<key>Title</key>
			<string>Assassin</string>
			<key>Description</key>
			<string>Great warm-up for a group of 7+ people. Everyone picks someone to be their bodyguard, and somebody to be their assassin. Don`t say out loud who picked who for what. Game starts, and everyone tries to protect themselves from their assassin, by trying to keep their bodyguard between themselves and their assassin. After several minutes of chaos everyone reveals who was picked for what.</string>
			<key>Tags</key>
			<array>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>7</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AssociationJump</string>
			<key>Title</key>
			<string>Association Jump</string>
			<key>Description</key>
			<string>This is physical association game. All plays mill about the room. At any time, trainer yells a player`s name. That player `jumps` into a frozen position. Trainer can (but does not have to) sidecoach by shouting `directions` (see  Fast Food Laban ) like `horizontal`, `up`, `down`, `sideways`, `big`, `small`, `light`, `heavy`. The other players watch our subject jump into a position, and then build around that player, inspired by whatever the frozen position out subject jumped into. The end result is a still scene. Tip: precede this exercise by Jump.</string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Exercise</string>
				<string>Group</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Narrator</string>
			<key>Title</key>
			<string>Narrator</string>
			<key>Description</key>
			<string>This improv format is like Typewriter without the typewriter: players improvise a scene, which a narrator describes and comments upon.</string>
			<key>Tags</key>
			<array>
				<string>Narration</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>FeatureFilm</string>
			<key>Title</key>
			<string>Feature Film</string>
			<key>Description</key>
			<string>This is a collection of improvized scenes, all based around (the making of) a movie. One character we definitely have in this improv format is a Director, who can direct the players to re-play poorly played scene, and who can offer parts of the storyline or  Tilts. before they actually get played. Apart from seeing the scenes from the movie itself, we can (but don`t have to) see scenes of what is going on behind the scenes (so you can have a totally different sub-plot going on there, if you want).</string>
			<key>Tags</key>
			<array>
				<string>Long Form</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AutomaticStorytelling</string>
			<key>Title</key>
			<string>Automatic Storytelling</string>
			<key>Description</key>
			<string>This is an exercise you can only do once with a group. Use the exercise to show that making stories is not all that difficult. Split the group in 2. Half of the players leave the room while you explain the game to the others: we are going to make stories in pairs. We will tell the other players that we came up with a great story, and they have to guess it. The catch is that they can only ask yes/no questions, and we do not really have a story. We will answer `no` to every question that starts with a vowel or with a conjugation of `to be` (or some other criterion). In addition, after having answered 2 consecutive No`s we will always answer a yes. Let the other players back in and pair them up with the others. Each couple starts guessing the story, unknowingly creating a story as they go. Continue till they get it. Origin :This exercise is described by  Keith Johnstone in  Impro for Storytellers.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Narration</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BackDancing</string>
			<key>Title</key>
			<string>Back Dancing</string>
			<key>Description</key>
			<string>Played in pairs. Actors stand back to back, and dance on different kinds of music. Back must stay in touch at all times.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BackwardsInterview</string>
			<key>Title</key>
			<string>Backwards Interview</string>
			<key>Description</key>
			<string>To play this improv game, ask for a topic for a TV interview. Then 2 players do the interview backwards. That means that the first sentence uttered is the last one in the interview, perhaps something like: Thanks for that enlightening explanation. (to the guest) To all of you viewers at home, thank you for watching, and see you next week. And then players work their way backwards. Various gimmicks can be played. For example, in your responses, you can pimp players. Examples would be: &quot;Thank you for that very energetic answer to the question&quot;, pimping the other player to do something very energetic.</string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>2</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>SceneReplay</string>
			<key>Title</key>
			<string>Scene Replay</string>
			<key>Description</key>
			<string>Ask at least 2 players to play a short scene. One could limit the scene to 8 lines of dialog per player. Then ask the players to replay the scene, based on some audience suggestions for: A particular emotion. An era. A different location. A film / TV / literature style. In Gibberish backwards.</string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
				<string>Replay</string>
				<string>Timed</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>2</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>JanusDance</string>
			<key>Title</key>
			<string>Janus Dance</string>
			<key>Description</key>
			<string>This is can be used as a Trust exercise, as well as in performance. 2 players perform a slow dance together, each with their head on the other`s shoulder. Hence they are not looking at each other. While dancing they perform a 2-3 minute scene. This gives for great listening practice, since players aren`t looking at their partners. If is also good for overcoming (physical) awkwardness between partners that are not familiar. And it is a great exercise for physical work in the dance, as in physical expression of the character`s feelings.</string>
			<key>Tags</key>
			<array>
				<string>Look and Listen</string>
				<string>Performance</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>2</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Balladeer</string>
			<key>Title</key>
			<string>Balladeer</string>
			<key>Description</key>
			<string>In this musical improv handle, one player is the balladeer, who starts singing a ballad about an audience suggestion. The other players actually play what the balladeer sings about, in slow motion. This is actually group story-building, as the players are inspired by the what the balladeer sings (obviously) but also, their actions can/should inspire the balladeer. Notes: You`re not limited to ballads, of course. Origin: The Improvoholics.</string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
				<string>Sing Song</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Bandaid</string>
			<key>Title</key>
			<string>Bandaid Tag</string>
			<key>Description</key>
			<string>One person is &quot;it.&quot; Whenever someone is tagged by &quot;it&quot; they must hold a bandaid (their hand) on the spot where they were tagged. Then the game continues. When someone runs out of bandaids, (they get tagged three times), they are frozen until two other people come over to them and &quot;operate.&quot; The two other people need to tag the frozen person at the same time and count to five.</string>
			<key>Tags</key>
			<array>
				<string>Energy</string>
				<string>Icebreaker</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>6</integer>
			<key>MaxPlayers</key>
			<integer>20</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>5</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BibbetyBop</string>
			<key>Title</key>
			<string>Bibbety Bop</string>
			<key>Description</key>
			<string>Silly warm-up to get the blood flowing. A players in a circle, one player in the middle. The player in the middle closes his eyes, holds right hand pointing in front of him, and spins around. When done spinning, open your eyes and say, as fast as you can `Bippety Bippety Bop`. The player you`re pointing to, and his 2 neighbors, need to build an elephant in less than the time the middle player needs to say `Bippety Bippety Bop`. An elephant consists of a trunk, made by the middle player, by holding your nose with one hand, and extending your other arm through the arm that holds the hand that holds the nose (does this make any sense?). The neighboring players each form a big ear, using both arms. Don`t forget to attach the ears to the elephant`s head. Any player that cannot get his/her part done by the time the middle player does `Bippety Bippety Bop` becomes `it` and takes place in the middle of the circle.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Barney</string>
			<key>Title</key>
			<string>Barney</string>
			<key>Description</key>
			<string>Silly warm-up game. Everyone in a circle, one person as a `caller` in the middle. Caller yells a letter to one of the players, that player must come up with a name of a person, an object or a service that can be sold, and a location, all starting with the letter given. Example would be `B` which leads to &quot;Barney sells Bread in Bulgaria&quot;. Anything goes, as long as it comes out right away, if not the player becomes caller.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Spontaneity</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>10</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Barnyard</string>
			<key>Title</key>
			<string>Barnyard</string>
			<key>Description</key>
			<string>Each person is given the name of an animal with approximately three-five people having the same animal. Spread the group across the room. No one is allowed to tell which animal he is. At the signal each person makes the noise of the animal that he has been given. The first group to find all of their animals and sit down are the winners.</string>
			<key>Tags</key>
			<array>
				<string>Energy</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>12</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Bartender</string>
			<key>Title</key>
			<string>Bartender</string>
			<key>Description</key>
			<string>A silly Short Form handle: ask for a silly problem. Player 1 goes into a bar and explains his woes to the bartender in an improvized song. The bartender then fixes the problem in another improvized song. See also: Three Melodies.</string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
				<string>Sing Song</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>4</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>5</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Catchem</string>
			<key>Title</key>
			<string>Catch&apos;em</string>
			<key>Description</key>
			<string>One player is `it` and stands at one end of the room, facing the wall. The other players at the other end of the room. Players need to try and get to the player who is `it` without `it` seeing them move. The player who is `it` can turn around at any time - at that point everybody else needs to freeze. Anyone who is caught moving is out.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Energy</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BeatnikPoet</string>
			<key>Title</key>
			<string>Beatnik Poet</string>
			<key>Description</key>
			<string>Tell the audience we are going to improvise a bad poetry night at pseudo intellectual coffee house. Ask for 2 unrelated objects or concepts. All players perform a poem that has both suggestions. If they miss out a suggestion or if they don`t rhyme, the audience yells Die! and the player commits suicide on stage.</string>
			<key>Tags</key>
			<array>
				<string>Die</string>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BeforeOrAfter</string>
			<key>Title</key>
			<string>Before or After</string>
			<key>Description</key>
			<string>A short scene is improvised. After that the host asks the audience whether they want to see what happened before this scene, or what happens after this scene.</string>
			<key>Tags</key>
			<array>
				<string>Continuation</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>This is a variation on the Fast Forward improv game.</string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>Become</string>
			<key>Title</key>
			<string>Become</string>
			<key>Description</key>
			<string>This one can be played with all players at a time, or you can ask the group to watch as players come up with different ideas on how to do this. Ask the players to become-- A jar of mayonnaise. A pack of cigarettes. Dentures. At first, this will probably not lead to much. Add side coachings, like: You are a jar of mayonnaise. Opened or not? Full or empty? Fresh or not? Show it. You are a pack of smokes. Empty or full? Filter cigarettes or not? Where are you? In someone`s pocket or on a shelve in a shop? Show it. You are a flower. What kind of flower? Blooming or not? In a vase or in a field? What color? Freshly picked or not? A present to a lover or at a funeral? You are water. Still or not? In a glass? A jar, a puddle, a lake or an ocean? Fresh or dirty? You are stone, air, sand, fire. Your are blue, red, green. You are a clock. Big Ben or grandfather clock? Working or not. Is your time right or not? A watch? Who is wearing you? A nun or a pimp? How could you show that? You are French fries. McDonalds or Wendy`s? Hot or cold? Any ketchup? On a plate or in a cardboard box? Eaten or not? Yummy or yuck? After a while, players should be able to come up with the side coachings for themselves. Encourage the players to try out different kind of stuff, see what they come up with.</string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Exercise</string>
				<string>Spontaneity</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>FastForward</string>
			<key>Title</key>
			<string>Fast Forward</string>
			<key>Description</key>
			<string>For this handle we need a `director`, or the MC can take on this role. A scene is started. The director can at any point interrupt the scene, and fast-forward (or backward) to another point in time. The story is then continued in that time. This technique can create flash backs. </string>
			<key>Tags</key>
			<array>
				<string>Continuation</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>HatContinuation</string>
			<key>Title</key>
			<string>Hat Continuation</string>
			<key>Description</key>
			<string>Start a scene, and identify each of the characters by means of a hat. The MC will interrupt (freeze) the game from time to time, and switch the players’ hats. After the switch each player becomes the character that previously wore his or her hat. The story needs to continue and should make sense. 
Notes: A gimmick is Commenting on the fact that characters `jump` in space when the hats get switched. Use sparingly.</string>
			<key>Tags</key>
			<array>
				<string>Continuation</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Bidirectional</string>
			<key>Title</key>
			<string>Bidirectional</string>
			<key>Description</key>
			<string>Fairly difficult combination of the Satellite TV and Satellite Radio improv games: players in pairs, establish a beat. Every beat, player 1 offers a movement and player 2 offers a word of a story. At the same time, players mirror each other, with a delay of 1 beat. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Look and Listen</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>SatelliteRadio</string>
			<key>Title</key>
			<string>SatelliteRadio</string>
			<key>Description</key>
			<string>Excellent listening exercise. Players in pairs. Establish a beat. Player 1 provides a story, one word per beat. Player 2, within the beat, repeats the story, but with one beat delay (like the delay we have on a satellite radio). Try with 2 or 3 beats delay as well. See also Satellite TV for an variation on this exercise. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Look and Listen</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>SatelliteTV</string>
			<key>Title</key>
			<string>Satellite TV</string>
			<key>Description</key>
			<string>Same as Satellite Radio, but with movements. Players in pairs. Establish a beat. Player 1 makes a new movement on every beat. Player 2 mirrors the movements, but with a delay of 1 beat.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Look and Listen</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BigBlob</string>
			<key>Title</key>
			<string>Big Blob</string>
			<key>Description</key>
			<string>Players perform a scene in a location that contains an enormous blob of blubber. Something yukkie. Players must walk or move through this blob as the scene continues, but their characters are not supposed to acknowledge that this Big Blob is there.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BigFishSmallFish</string>
			<key>Title</key>
			<string>Big Fish Small Fish</string>
			<key>Description</key>
			<string>Fun energizer game. Everyone in a circle. We are going to pass a pattern along the circle. Everyone, at their turn does either:
                Say Big Fish, and hold both hands in front of you, about 3 inches or 10cm apart. &quot;It&quot; then passes to the next person in the circle.
                Say Small Fish, and hold both hands in front of you, about 15 inches or 50cm apart. When this is done, the direction changes.
                Players that miss (e.g. say Small Fish and keep your hands too close together or say Big Fish and move hands wide) do a forfeit, or die with a loud noise.</string>
			<key>Tags</key>
			<array>
				<string>Energy</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BlackBox</string>
			<key>Title</key>
			<string>Black Box</string>
			<key>Description</key>
			<string>This improv game is played by 2 players. One holds a (mimed) black box, which has 3 buttons, one of which is red. These buttons control a player, one button might be the `jerk your leg` button. The exact functions of each button are not defined. The other player enters and asks if he can play with the box. Player 1 agrees, but adds something like &quot;Whatever you do, don`t push the red button&quot;. Player 2 begins to play with the buttons, controlling player 2. Then we slowly work up to the use of the dreaded red button, which will make player 2 do something not-so-obvious. This can be anything, but it should not be preconceived. The red button might become a Mood swing button a Start Screaming, Start Giggling, Sing Opera, or Switch-to-Gibberish button. </string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>2</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>15</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BlindAssociationCircle</string>
			<key>Title</key>
			<string>Blind Association Circle</string>
			<key>Description</key>
			<string>This one starts just like Free Association Circle: players in a circle, establish a rhythm, and freely associate on previous player`s word. As this is going on, the trainer will tap all players gently on the shoulder, at 3 times first tap: players close their eyes but continue the free association, sticking to the rhythm second tap: everyone starts walking around (carefully!), eyes still closed. Players have to recognize the voice of their ex-neighbor in the circle to know when it`s their turn. Third tap: all players, still eyes closed, and still associating, try to reconstruct the circle. Exercise is over when everyone is in a circle again. Trainer should keep an eye on players to make sure they don`t run into things. It helps if there`s not too much clutter around, of course. </string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Exercise</string>
				<string>Look and Listen</string>
			</array>
			<key>MinPlayers</key>
			<integer>6</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>FreeAssociationLines</string>
			<key>Title</key>
			<string>Free Association Lines</string>
			<key>Description</key>
			<string>Everyone in a circle and we establish a rhythm, by swinging a hand. Once a rhythm is established, one player starts by tossing a word to his neighbor, who associates on the word and tosses another word to his neighbor. It`s important to stay in the rhythm. Tell the players to just say `banana` if they feel they can`t think of a word, as long as the rhythms does not get broken. </string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>15</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>Try this in combination with Last Letter. </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>LastLetter</string>
			<key>Title</key>
			<string>Last Letter</string>
			<key>Description</key>
			<string>This is an Association game, where instead of naming the first word you think of upon hearing a previous word, you name the first word you think of starting with the last letter of the previously heard word. </string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>Try in combination with Walk-over Association or Word Ball. </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>WalkOverAssociation</string>
			<key>Title</key>
			<string>Walk Over Association</string>
			<key>Description</key>
			<string>Another way of playing association games. Place all players at one end of the room. Ask them to name, for themselves, all the things they think of when you throw them the word `Banana` (or anything else). For every word they come up with they can take a step. They should keep thinking of stuff until they reach the other side of the room. Then throw them another word. 
                Notes: Watch for players that take unreasonably big steps. Ask them if they are afraid they will run out of ideas. </string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>You can combine this with Last Letter. </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>WordBall</string>
			<key>Title</key>
			<string>Word Ball</string>
			<key>Description</key>
			<string>Another association game. All players in a circle. One player starts by tossing a word to another player. The receiver associates on this word, and throws his association to yet another player. </string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>Try this in combination with Last Letter or Free Association Lines. Instead of just tossing word, have the players throw a soft ball, or a towel tied in a knot to each other. Try with multiple `tossers` at once. </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>BlindFreeze</string>
			<key>Title</key>
			<string>Blind Freeze</string>
			<key>Description</key>
			<string>This one is just like Freeze Tag, but here the MC calls Freeze, and calls in another player. If you`re not using an MC, any player might call Freeze and call in any other player. Many groups find this game more exciting than Freeze Tag, as players don`t know when they get pushed in the game, and hence are less prepared, and crazier, more exciting stuff tends to happen. </string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Exercise</string>
				<string>Performance</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>FreezeTag</string>
			<key>Title</key>
			<string>Freeze Tag</string>
			<key>Description</key>
			<string>2 actors start an improvised scene. At any point in time another player can call Freeze. This player then tags out one of the 2 actors, and takes his place. Both players then start a new scene, justifying their positions. 
                    Notes: The way this improv game is played quite often goes a bit against good improv, as many groups hardly take the time to develop a story line. If played this way, it`s more a game of wit, and you would probably use it early in a show as an audience (and player) warm-up. Alternatively, you can take your time and play every scene for several minutes, see what develops, and only at the end of each scene tag into another scene. To avoid preconceptions, see Blind Freeze. </string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Exercise</string>
				<string>Performance</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BlindHarold</string>
			<key>Title</key>
			<string>Blind Harold</string>
			<key>Description</key>
			<string>This is really a listening exercise, though it has been performed as a Long Form for audiences. Basically, this is a Harold, played with all players sitting down with their eyes closed. For a performance one would turn all the lights off in the theater. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Limitations</string>
				<string>Long Form</string>
				<string>Look and Listen</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>16</integer>
			<key>MinTime</key>
			<integer>10</integer>
			<key>MaxTime</key>
			<integer>60</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Harold</string>
			<key>Title</key>
			<string>Harold</string>
			<key>Description</key>
			<string>Harold is a long format, and consists of a number of sub-formats. It basically consists of 3 components: 
                    Scenes, with 2 to 4 players
                    Games: 
                    Monologues: The format starts with a suggestion from the audience - this could really be anything. 
                    Players will start associating around the suggestion, and then an opening game is played. In this game, a lot of associated elements round the audience suggestion are presented. The opening game might be a song a monologue, or simply a group association based on the audience suggestion. The idea is to use the elements and themes that come up or about in the opening game in what follows. Then follow 3 rounds of scenes, all based on the themes found in the opening game. Each round exists out of 3 scenes, all unrelated, but each loosely based on the themes and associations form the opening game. Since these themes originated for the same audience suggestion, the audience will (hopefully) feel some links between the scenes. After the first round of 3 scenes, an improv game is played, this game is unrelated to the 3 scenes played before. Then, in the second round, each of the 3 previous scenes is continued, and more or less obvious links between the scenes start to emerge. This is again followed by an improv game, and then the 3 scenes are played into a conclusion. It`s quite possible that in the third round not every scene is continued scenes may disappear or even merge with one another. A Harold can be played with a decent number of players (up to 12 or so) players can act in multiple scenes, as the same or as different characters. A Harold can be played with or without props, with or without directors. Whether one sticks to the 3 rounds or not is really not relevant, anything and any combination of games and loose scenes that finally more or less come together can be considered a Harold. 
                    Origin: This is an American format, described in Del Close`s book Truth in Comedy. We`re not sure whether it`s copyrighted - if you know please let us know.</string>
			<key>Tags</key>
			<array>
				<string>Format</string>
				<string>Long Form</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>16</integer>
			<key>MinTime</key>
			<integer>10</integer>
			<key>MaxTime</key>
			<integer>60</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BlindLineOffers</string>
			<key>Title</key>
			<string>Blind Line Offers</string>
			<key>Description</key>
			<string>Line up the players, give`em each a number. Call out 2 numbers. Those players step on stage immediately, with a physical Offer (do something, eat an apple, wipe the floor, whatever) as well as a vocal offer (say something). The idea is that the players accept and explore each other`s offers and figure out what the scene is about. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BlindMusical</string>
			<key>Title</key>
			<string>Blind Musical</string>
			<key>Description</key>
			<string>This is like a musical version of Pockets: ask the audience to write simple sentences on slips of paper. Hand each player 2 or 3 slips (they`re not allowed to read them yet). Play a scene or series of improvised scenes. Players draw slips of paper at random, and every time they do, they start a song that starts with the sentence on the slip. Try to integrate the info on the slips into the story, of course! </string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
				<string>Sing Song</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Pockets</string>
			<key>Title</key>
			<string>Pockets</string>
			<key>Description</key>
			<string>Before the show, ask the audience to write simple sentences on slips of paper. Anything goes. The game is played by 2 players. Ask for a location, or a profession, and have every player draw 3 of these slips. Players put these in their pockets without reading them. Then a scene is played, in which at any point in time, players replace what they might have said, by whatever is on the piece of paper they draw out of their pocket. Try to incorporate/justify whatever is your line into the scene. 
                Notes: Try to avoid thinks like `My granny always said` - you want your character to say whatever is on the piece of paper - don`t try to put those words into someone else`s mouth. See also a game called Bucket that uses audience lines as well. </string>
			<key>Tags</key>
			<array>
				<string>Audience Participation</string>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BlindfoldedScene</string>
			<key>Title</key>
			<string>Blindfolded Scene</string>
			<key>Description</key>
			<string>Players are blindfolded and then play a scene. </string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>DeathAndRetriever</string>
			<key>Title</key>
			<string>Death and Retriever</string>
			<key>Description</key>
			<string>This one is like Scorpion, but in this version killed players are not `out`, but can be revived. Everyone eyes closed, one player becomes the killer (tap him on the shoulder) and another one becomes the retriever. The retriever gets a towel or a scarf around their neck. Dead players scream when they are killed, keep their eyes closed and stand still. When the retriever bumps into someone that does not move (a dead body) she can revive the dead by rubbing them with the towel. When the retriever gets killed, she screams and stops moving. When another living person bumps into the retriever (recognized by the scarf), the retriever is revived, and the one that revived the retriever becomes the new retriever. Play till everyone is dead or bored. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>6</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>15</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BluesJam</string>
			<key>Title</key>
			<string>Blues Jam</string>
			<key>Description</key>
			<string>Ask the audience for 5 things that give them the blues. Then improvise a blues jam about those elements. </string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
				<string>Sing Song</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BobsleddingBodies</string>
			<key>Title</key>
			<string>Bobsledding Bodies</string>
			<key>Description</key>
			<string>This is a physical team game. Form teams of 4 - 6 players. Teams sit in a line and wrap their legs around the person in front of them. Place masking tape about 10 - 15 feet away to mark the end line. On &quot;GO&quot;, teams must only use their hands to slide their way to the end. If a team breaks apart, they must get back together before they continue. </string>
			<key>Tags</key>
			<array>
				<string>Energy</string>
				<string>Icebreaker</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>8</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BodyHide</string>
			<key>Title</key>
			<string>Body Hide</string>
			<key>Description</key>
			<string>Excellent exercise to get to know each other, and to learn to trust and touch each other. There are 5 volunteer players. 4 of these must try and hide the fifth person, using nothing but their bodies. The other students stand around the group and try and see pieces of the fifth`s clothes, shoes skin. It`s great fun for the other students to watch and try and find uncovered pieces of person. Don`t tell them they go next, with one person less. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
				<string>Icebreaker</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>8</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>Try this game with less and less `hiders`. If the task becomes impossible, tell them they can use parts of walls. Using a corner is easiest, of course, but let them figure that out themselves. </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>LCD</string>
			<key>Title</key>
			<string>LCD</string>
			<key>Description</key>
			<string>This improv game is called Location, Career, Death (LCD). One player on stage, the others off stage. The audience provides a location, an occupation, and an object, only known to the player on stage. Second player enters and a scene is played in gibberish. Player one needs to communicate the location to player 2, as soon as player 2 thinks he`s got it, he claps his hands and spins around. Then player 2 needs to guess the occupation, clap and spin when he thinks he’s got it. Finally, the object needs to be revealed. As soon as player 2 has the object, he needs to kill player 1 with it. Then the next player comes on stage and the game recommences, until all players have played. Afterwards, line up the players and ask them where they think they were, what their occupation was and what the murder weapon was - usually quite far off the original suggestion, much to the audience`s amusement. See also Hijacker for a similar game without the Gibberish component. </string>
			<key>Tags</key>
			<array>
				<string>Endowment</string>
				<string>Gibberish</string>
				<string>Guessing</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>Use a bell, every 10 seconds or so. At the bell players need to clap and spin and proceed to the next step, even if they are not sure about the where, who and what. </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>Hijacker</string>
			<key>Title</key>
			<string>Hijacker</string>
			<key>Description</key>
			<string>Excellent improv game to train listening skills. 4 players, one leaves the room. Pick a means of transportation, and an object. The idea is that player number 4 needs to guess the means of transportation and then use the object to hijack the others. Finally, pick a goal for the hijacker to achieve. The players need to provide hints to the hijacker, but they cannot explicitly tell the hijacker what to do, with what or why. 
                Notes: Works best if players take risks. If they to the `wrong` thing or use the wrong object the audience will probably just laugh, and that should be enough to signal the player he`s going the wrong way. </string>
			<key>Tags</key>
			<array>
				<string>Continuation</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>4</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Boris</string>
			<key>Title</key>
			<string>Boris</string>
			<key>Description</key>
			<string>2 players play an improvised interrogation scene. One is the interrogator, the other is a suspect. The interrogator randomly throws unconnected elements to the suspect, who needs to incorporate these and get himself into (even more) trouble. Then we have Boris, who is a nasty, huge, but invisible thug assisting the interrogator. Every time the interrogator does not like the suspect`s answers (and also when the suspect does not incriminate himself enough), the interrogator calls on Boris to torture the suspect, prodding him to confess or incriminate him even further. 
                Notes: We do not establish the crime beforehand. The suspect mimes being tortured by Boris the investigator and can tell Boris what to do (break his leg), but it is more fun to leave the choice of torture up to the suspect. If the torture does not go far enough to the investigator`s taste, he can always call in Boris` evil twin brother, Igor (also invisible);as a gag, the suspect can also incriminate Boris (who can turn out to be a witness/accomplice to the crime). 
                Origin: This improv game is attributed to Keith Johnstone. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Narration</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>CallFromRay</string>
			<key>Title</key>
			<string>Call from Ray</string>
			<key>Description</key>
			<string>A scene is begun. At some point in the scene an onstage player has to receive a &quot;Call from Ray&quot; (or any other name agreed upon). The call can come in any form like phone call, SMS, smoke signals, telepathy or whatever, and Ray himself may not appear in the scene. </string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>You can come up with any sentence that needs to come up. A variation would be to use: “I`ll have a coke&quot;.</string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>CardStatus</string>
			<key>Title</key>
			<string>Card Status</string>
			<key>Description</key>
			<string>Excellent Status improv game with at least 4 players. Ask an audience member to pick a number of cards out of a deck equal to the number of players, and attach a card to each player`s forehead, so that players can see each other`s card, but not their own. Use a rubber band or a piece of string for that. The idea is to improvise a scene, in which the status order of the characters is defined by the cards. Evidently, players don`t know their own status, so the other players will have to endow them. 
                Notes: Set up a location where status is important. Examples would be a Royal Palace or a highly organized bureaucracy (the White House?). </string>
			<key>Tags</key>
			<array>
				<string>Endowment</string>
				<string>Limitations</string>
				<string>Look and Listen</string>
				<string>Performance</string>
				<string>Status</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>Players can only see their own card, but not the others. Give players multiple cards, and let them switch cards in the middle of the scene. Status should change accordingly. As an exercise, let players play a scene and then ask them to line up in status order to see if they `got` their status right. </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>Cards</string>
			<key>Title</key>
			<string>Cards</string>
			<key>Description</key>
			<string>Ask the audience to write short sentences on cards. Give 2 players 3 cards, which they put in their pockets. Then they play a scene. At any point in time, instead of saying whatever they think they might say, they take a card, and read what`s on the card. Whatever is said should be justified. See also Actor`s Nightmare. </string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>8</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>CatAndMouse</string>
			<key>Title</key>
			<string>Cat and Mouse</string>
			<key>Description</key>
			<string>All players in pairs. One player is cat, one other player is mouse, and all others stay in pairs arms hooked together. Cat chases mouse, when mouse is caught then mouse becomes cat and vice versa. However, mouse can escape chase by hooking into any pair of other players. At that point the player at the other end of the pair becomes cat and the cat becomes mouse. </string>
			<key>Tags</key>
			<array>
				<string>Energy</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>6</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>CharacterSwap</string>
			<key>Title</key>
			<string>Character Swap</string>
			<key>Description</key>
			<string>2 players improvise a scene, and make distinct strong physical and vocal choices. Scene is played until we know the characters. Then the roles are reversed, and every player plays the other&apos;s character, in the same scene, same location.
                The exercise trains listening and physical observation, and is a great way to get players to break away from their stock characters.</string>
			<key>Tags</key>
			<array>
				<string>Characters</string>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Look and Listen</string>
				<string>Replay</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ChivalrousCouples</string>
			<key>Title</key>
			<string>Chivalrous Couples</string>
			<key>Description</key>
			<string>One person with a loud voice will stand on a chair or other high place so that they can be seen above the heads of the group. After you have explained the game and everyone is ready the person on the chair will call out one of the following couples: Knight and Queen, Prince and Princess, and Horse and Rider. When one of these three couples is called people must get into pairs. If Horse and Rider were called one of the people in the pairs will be the Horse and one will be the Rider. Then the pairs will get into the correct formation. Each of the three chivalrous couples has its own formation that goes with it. The Knight and Queen&apos;s formation is one person as the &quot;Knight&quot; down on one knee and the other person as the &quot;Queen&quot; sitting on the &quot;Knight&apos;s&quot; knee. The Prince and Princess formation is one person as the &quot;Prince&quot; will have the other person, the &quot;Princess,&quot; in their arms. The Horse and Rider formation is the &quot;Horse&quot; will be standing up and the &quot;Rider&quot; will be riding piggy-back on the &quot;Horse. The last pair to get into the correct formation is either out of the game or they &quot;Take 5&quot; off to the side of the group. After one chivalrous couple has been called and one or two pairs of people have been eliminated have the group mingle. Then randomly call another couple. Have the group try to get into pairs with different people at every round. </string>
			<key>Tags</key>
			<array>
				<string>Energy</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>5</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>CircleSitting</string>
			<key>Title</key>
			<string>Circle Sitting</string>
			<key>Description</key>
			<string>Have everyone stand in a circle, really close to each other, facing inwards. Then ask everyone to make a quarter turn left. Make everyone stand even closer to each other. When ask the whole group to sit down. If everyone is really close, they will end up sitting on one another`s knees, and the whole construction supports itself. If well done it`s even possible to make the circle walk. Indicate which foot to start though! </string>
			<key>Tags</key>
			<array>
				<string>Group</string>
				<string>Trust</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ClapSnapStamp</string>
			<key>Title</key>
			<string>Clap Snap Stamp</string>
			<key>Description</key>
			<string>All players in pairs, facing each other. We`re going to count from one to three, each player saying one number at a time, and we keep repeating this. So player number one would go “one”, then when it returns to him he says “three”, then “two” and so on. Once they get this, we replace the `one` with a `snap` (snap your fingers). Once everyone is into that, we replace the `two` as well, with a hand-clap. Finally, we replace the `three` as well, with a stamp of the right foot. Play at high speed! </string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ColumbianHypnosis</string>
			<key>Title</key>
			<string>Columbian Hypnosis</string>
			<key>Description</key>
			<string>Played in pairs. One player holds her open hand, fingers upward, about 2-3 inches from her partner`s face. She then starts moving her hand about slowly, while her partner tried to keep his face at exactly the same distance from her hand, like her hand is pulling of pushing his face about. Switch sides and partners after a couple of minutes.
                Notes: This is really also an exercise for the hypnotized, as she needs to ensure that her partner is able to follow her. Origin: Described in Augusto Boal`s Games for Actors and Non-actors. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>Use both hands. </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>ComingHome</string>
			<key>Title</key>
			<string>Coming Home</string>
			<key>Description</key>
			<string>Ask players to think of someone they know. Then ask them to play how that person would come home from work. Players need to pay attention to the environment: what does that person`s house look like? Is it neat and tidy or is it a mess? Big house or small apartment? What does he do? Does the character change clothes or showers or has a beer first? Does he eat? If so, what? Microwave dinner, carryout, pizza delivery or cornflakes? What mood is that character in? How was work today? </string>
			<key>Tags</key>
			<array>
				<string>Characters</string>
				<string>Environment</string>
				<string>Exercise</string>
				<string>Object Work</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>You can come up with other situations in which characters enter a location. </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>Commercial</string>
			<key>Title</key>
			<string>Commercial</string>
			<key>Description</key>
			<string>Ask for a product (existing or non-existing). Then play a commercial for that product. </string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>You can do this as a radio commercial. Cut the lights in the theater. You can play the whole development of the commercial, starting with the brainstorming by the marketing guys, the work of the production company coming up with a slogan, jingle, etc. You can even play the bloopers at the actual taping of the commercial. </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>CommunalMonologue</string>
			<key>Title</key>
			<string>Communal Monologue</string>
			<key>Description</key>
			<string>All improvisers in a circle. One player in the middle, and that player starts improvising a monologue. At any point in time, any other player may step (or rather glide) in and take the middle&apos;s player&apos;s place, and continue the monologue. The transitions should be smooth of course. </string>
			<key>Tags</key>
			<array>
				<string>Characters</string>
				<string>Continuation</string>
				<string>Exercise</string>
				<string>Look and Listen</string>
			</array>
			<key>MinPlayers</key>
			<integer>6</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>CompleteBodies</string>
			<key>Title</key>
			<string>Complete Bodies</string>
			<key>Description</key>
			<string>Players in pairs. One player takes a position, using all parts of her body. The other player completes that position, by folding over/in/around the first player, without touching her. First player then completes second player in another pose, again without touching. As a next step, do the same, but tell a story, one sentence at a time, providing a sentence every time you move. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Look and Listen</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ConcentrationCircle</string>
			<key>Title</key>
			<string>Concentration Circle</string>
			<key>Description</key>
			<string>Place all players in a circle and number them sequentially, starting with a random player. The players then establish a rhythm, for example by swinging their left hands up and down. Have player 1 start, when her arm is up she shouts/throws a number. The player with that number needs to throw another number at the next beat. Players that fail (if they did not recognize their own number) or that break the rhythm become the last player in the circle, and that changes the numbers for a bunch of players. Restart with player one. See also Big Booty. </string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>8</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>StoryStoryDie</string>
			<key>Title</key>
			<string>Story Story Die</string>
			<key>Description</key>
			<string>Players form a line on the stage. A title for a story, and a story genre is obtained from the audience. The MC starts the game by pointing to a player who needs to start telling the story. At any point in time the MC can switch to another player, who needs to continue the story flawlessly, even if the switch happened in the middle of a sentence or even in the middle of a word. Players that hesitate, or whose sentences are not grammatically correct or don`t make sense, are boo-ed out of the game, by the audience yelling `Die`. The last player left ends the story. </string>
			<key>Tags</key>
			<array>
				<string>Die</string>
				<string>Narration</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Confessions</string>
			<key>Title</key>
			<string>Confessions</string>
			<key>Description</key>
			<string>Not exactly theater but fun when played well. The MC gets a bunch of `confessions` from the audience. These can be really lame, like e.g. “I vote democratic”, “I used to be a man”, “I sold a kidney`, whatever. Then players line up. One player steps forward, and gets a confession from the host. Player utters the confession in a character, and immediately another player jumps in and offers a witty reply. Do this as long as players have ideas for replies. Then replace the first player by a new one, give her a new confession and repeat ad libitum. </string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
				<string>Verbal Wit</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ContinuingEmotions</string>
			<key>Title</key>
			<string>Continuing Emotions</string>
			<key>Description</key>
			<string>A `neutral` improvised scene is started, and is then interrupted (frozen) several times by the MC. The scene is then continued but all characters switch to an emotion provided by the audience. </string>
			<key>Tags</key>
			<array>
				<string>Continuation</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ContinuingStyles</string>
			<key>Title</key>
			<string>Continuing Styles</string>
			<key>Description</key>
			<string>A `neutral` improvised scene is started. This scene gets interrupted several times by the MC, and then continued in a film/ literature/ drama/ TV-program style provided by the audience. The platform and the story need to continue flawlessly. </string>
			<key>Tags</key>
			<array>
				<string>Continuation</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>CopyCat</string>
			<key>Title</key>
			<string>Copy Cat</string>
			<key>Description</key>
			<string>CopyCat goes like a verbal Freeze Tag. A scene is started. At any time, a player at the side can step forward (the playing players hold off for a moment) and repeats a line that was said in the scene. Whoever originally said that line, steps aside, and the remaining players start a new scene starting with the line that was repeated. </string>
			<key>Tags</key>
			<array>
				<string>Association</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>Feel free to actually continue the ongoing scene rather than to start a completely new one. Feel free to replace all the players instead of just the player who said the last line. Rather than just stepping in and repeating a line, you might want to call `FLIP` (or freeze). </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>CrabtreesConundrum</string>
			<key>Title</key>
			<string>Crabtree&apos;s Conundrum</string>
			<key>Description</key>
			<string>This game is taking from Mrs. Crabtree from South Park. 2 players start a scene and every now and then a player will say “What`d you say?&quot; And the other player must come up with a completely different phrase that rhymes with the one just said. For instance: Player 1: “Christine, I think you are as sick as a dog!!”
                Player 2: “What`d you say?”
                Player 1: “I said I think we should go for a jog, it`s a really nice day” and so forth. See Ding for a similar game. </string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>5</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Ding</string>
			<key>Title</key>
			<string>Ding</string>
			<key>Description</key>
			<string>A scene is played. Whenever the MC ring a bell (or yells `Ding`) the player that is doing something/saying something needs to say/do something else.
                Notes: Doing `something else` is quite often interpreted as doing/saying the opposite of what you did before. One can be more creative, e.g. repeat what was said in a different emotion. If you use this as an exercise on Spontaneity the trainer can `Ding` quite often (very frustrating for the players, but they will come up with stuff they never would have thought of before). The disadvantage of this is that the story/characters tend to get lost. Use sparingly for performance. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Performance</string>
				<string>Spontaneity</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>CreateObstacles</string>
			<key>Title</key>
			<string>Create Obstacles</string>
			<key>Description</key>
			<string>Two players chase each other about the room. The player that is being chased mimes obstacles for the other, who then has to overcome these obstacles. </string>
			<key>Tags</key>
			<array>
				<string>Energy</string>
				<string>Icebreaker</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>CrimeEndowments</string>
			<key>Title</key>
			<string>Crime Endowments</string>
			<key>Description</key>
			<string>One player is endowed as the head of a criminal organization and gathers with the others to plan or act out the crime. He is endowed with something to steal, hijack or kill, a method or weapon, and some wild card such as a code word or a disguise. This is sort of a generalization of Hijacker. </string>
			<key>Tags</key>
			<array>
				<string>Endowment</string>
				<string>Guessing</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>CrisisSituation</string>
			<key>Title</key>
			<string>Crisis Situation</string>
			<key>Description</key>
			<string>Great exercise for spontaneity. 2 players on stage approach each other with a crisis, and an object unrelated to the crisis. After each has presented his or hers, each solves the other`s crisis with their own object. Replies must be instantaneous and may be ridiculous.
                Example:
                Player A: My wife left me and I`m stuck here with this t-shirt
                Player B: I got robbed and all I have left is my good looks.
                Player A: Here`s my t-shirt; you can sell it and make some money.
                Player B: Erm... Marry me. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Object Work</string>
				<string>Spontaneity</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>CrossCircle</string>
			<key>Title</key>
			<string>Cross Circle</string>
			<key>Description</key>
			<string>Perfect game to learn each other`s names. Everyone in a circle. One person (A) starts by calling another person`s name (B). At that point, A starts walking towards B. Before A gets to B, B needs to call another name (C), so B frees her spot in the circle, for A to take. C then needs to call yet another name and start walking, so B can take C`s spot. </string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Icebreaker</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array>
				<string>Instead of calling names, players can pick another player by making eye contact (and nodding to acknowledge that eye contact has been made). This demands a lot of concentration. You can have more than one cycle going, if the group is big enough. </string>
			</array>
		</dict>
		<dict>
			<key>Image</key>
			<string>Cut</string>
			<key>Title</key>
			<string>Cut</string>
			<key>Description</key>
			<string>Usually, we decide on a category before the start of this game. Possible categories are:
                -Soap series, like The Bold and the Beautiful, Dallas, Eastenders
                -Hospital drama, like E.R.
                -Cop drama, like Hill Street Blues
                -Romantic Comedy, like The Love Boat
                -Crime series or murder mysteries</string>
			<key>Tags</key>
			<array>
				<string>Format</string>
				<string>Long Form</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Bucket</string>
			<key>Title</key>
			<string>Bucket</string>
			<key>Description</key>
			<string>Before the show ask the audience to write simple sentences on slips of paper. Those go in a big bucket. A scene is improvised, and at random moments the players don`t just invent a line of dialog, but use a line off a piece of paper drawn from the bucket. Anything said is accepted, heightened and integrated.</string>
			<key>Tags</key>
			<array>
				<string>Audience Participation</string>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
	</array>
	<key>Version</key>
	<string>0.85</string>
</dict>
</plist>

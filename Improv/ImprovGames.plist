<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Games</key>
	<array>
		<dict>
			<key>Image</key>
			<string>10fingers</string>
			<key>Title</key>
			<string>10 Fingers</string>
			<key>Description</key>
			<string>Great game for getting to know each other in a new group. All players in a circle, holding all 10 fingers up in the air. One person at a time, start asking personal questions that take yes-no answers, whoever cannot answer yes to a question, drops a finger. Last person with a finger left wins. Good questions are things like &quot;I have a cat&quot;, &quot;I have never stolen anything&quot; and so on.</string>
			<key>Tags</key>
			<array>
				<string>Icebreakers</string>
				<string>Warmup</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>3series</string>
			<key>Title</key>
			<string>3 Series</string>
			<key>Description</key>
			<string>Everyone in a circle. Pick a category (e.g. make of cars, girls names kinds of food, kinds of plants, whatever). First person states an example of the category, and points to someone else. Keep pointing. That someone else does the same, with a different item in the category, and so forth, until everyone points at one person. Then repeat the pattern. Make eye contact when passing your item to the next person. Drop the pointing arms when everyone is comfortable and the series is collectively memorized. Then do the same with a second category, and make sure the pointing pattern is different. Repeat till everyone is comfortable. Then do the same exercise, without pointing, and running the 2 categories at the same time. Add a third, fourth category if you wish. No pointing arms any more! The idea is not only to listen for the item right before yours in the series (so you know when it`s your turn), but also to make sure that when you pass an item to someone else, that someone else actually hears you. If not, then repeat your item, to ensure the series does not get broken.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Look and Listen</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>3some</string>
			<key>Title</key>
			<string>3 Some</string>
			<key>Description</key>
			<string>Fun warm-up. One player offers something, e.g. I am a slice of cheese. 2nd player jumps in and adds something to the offer, e.g. I am a slice of bread. 3rd player jumps in and again adds to the setup, e.g. I am a pickle. First player leaves, taking one of the others with him. Restart from the remaining player, who restarts by saying what/who she is.</string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>5</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AcceptingCircle</string>
			<key>Title</key>
			<string>Accepting Circle</string>
			<key>Description</key>
			<string>Get everyone in a big circle. One player starts by making a little gesture perhaps with a little sound. His or her neighbor then tries and does exactly the same. And so on. Although we expect the gesture/sound not to change, it will. Notes Watch for movements that suddenly change left/right arm or leg. This is not really supposed to happen, but it will. Once happened, it should be accepted by the next player. Also watch/listen for little moans or sighs that players might make before or after their turn - these should also be taken over by the next player.</string>
			<key>Tags</key>
			<array>
				<string>Accepting</string>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Narrative</string>
			<key>Title</key>
			<string>Narrative, Color, Emotion</string>
			<key>Description</key>
			<string>One players tells a story, solo. Other players tag the player if they want to hear more action (narrative), more emotion or more color. By color we mean environmental detail, as in how does it smell, temperature, weather, colors, sounds.</string>
			<key>Tags</key>
			<array>
				<string>Environment</string>
				<string>Exercise</string>
				<string>Narration</string>
				<string>Object Work</string>
				<string>Solo</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>4</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ActionSyllables</string>
			<key>Title</key>
			<string>Action Syllables</string>
			<key>Description</key>
			<string>Great warm-up that also helps a new group to learn each other&apos;s names. Everyone in a circle. First person says his name, making a gesture (an action) for every syllable. Mary has 2 syllables, so she does something like &quot;Ma-&quot; (wave right hand) &quot;-ry&quot; (claps in hands). Everyone repeats this. Then the second person calls his name, again with a gesture per syllable. Group repeats, and then repeats all previous names and syllables.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Energy</string>
				<string>Warm-up</string>
				<string>Icebreaker</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>SimpleContinuation</string>
			<key>Title</key>
			<string>Simple Continuation</string>
			<key>Description</key>
			<string>A scene is started, played by 2 to 4 players. Mid-scene the MC interrupts, and all characters are replaced by new players. The new players should take over the original characters, and stick to the story that was being developed.</string>
			<key>Tags</key>
			<array>
				<string>Continuation</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Switcheroo</string>
			<key>Title</key>
			<string>Switcheroo</string>
			<key>Description</key>
			<string>This is like Simple Continuation, except that the MC interrupts the scene several times, and at each interruption all actors in the scene get switched, no new actors join in, and no actors leave.</string>
			<key>Tags</key>
			<array>
				<string>Continuation</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Actor&apos;sNightmare</string>
			<key>Title</key>
			<string>Actor&apos;s Nightmare</string>
			<key>Description</key>
			<string>This one is played by 2 players, one of which gets their lines on paper (like a script). The other player should justify whatever the scripted player says. Notes: You can use existing plays for this, but also lines from comics. Whoever gets the script should not forget to play/act - only his/her lines are defined, not what he/she does, or how he/she does the lines.</string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
				<string>Prop</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>2</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AdjectiveScene</string>
			<key>Title</key>
			<string>Adjective Scene</string>
			<key>Description</key>
			<string>Ask for an adjective (e.g. sad). Play a scene in which the players are as sad as possible. Alternatively, give every player a different adjective.</string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>MakeMoreInteresting</string>
			<key>Title</key>
			<string>Make More Interesting</string>
			<key>Description</key>
			<string>Simple exercise, useful for players that are too verbal. One player starts a scene. As soon as the trainer claps his hands, the player needs to make whatever he was doing more interesting, without advancing. If our player was opening a briefcase at the clap, he needs to make opening a briefcase more interesting, he is not allowed to take something out of the briefcase, as that would be advancing, player needs to stick to opening the briefcase. Notes Simple to explain but not so easy to play. When done well you move into the clownesque. Think about Chaplin, Laurel Hardy or Mr. Bean.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Aerobics</string>
			<key>Title</key>
			<string>Aerobics</string>
			<key>Description</key>
			<string>This is a fun observation game. Place all players in a line. The first player starts walking around the room walking a large circle. The second player starts following the first one and tries to move like the first player. After a few rounds, the first player goes to the back of the line, and the third player starts following and imitating the second one. Notes Tell players to be themselves, don`t try and walk around funny (it`s not the Ministry of Silly Walks after all).</string>
			<key>Tags</key>
			<array>
				<string>Characters</string>
				<string>Exercise</string>
				<string>Icebreaker</string>
				<string>Look and Listen</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ThreeRules</string>
			<key>Title</key>
			<string>Three Rules</string>
			<key>Description</key>
			<string>Get 3 rules from the audience, e.g. players have only one arm, players can`t use a word that contains an `s` and after every question uttered players needs to yell `Yess!`. Players then play a scene, obeying the 3 rules. For examples of what else might be used as a rule see the other games with a Limitation Tag</string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>12</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BlindLead</string>
			<key>Title</key>
			<string>Blind Lead</string>
			<key>Description</key>
			<string>One player is blindfolded, and the room is filled with obstacles (put a couple of chairs everywhere, leave all kinds of junk on the floor). The idea is that the rest of the group will lead the blindfolded player through the room, by talking. A helpful reader offered us an explanation for the name `Airplane`: The blindfoldee (or just eyes closed) is led through a maze composed of furniture and the other actors. He is an &quot;Airplane&quot; lost in the fog being talked down by the &quot;Air Traffic Controller&quot;, who must remain in his/her &quot;Tower&quot;. Standing on a chair/rehearsal block lends visibility for the controller. The airplane also only has a limited amount of fuel left (1-3 minutes, whatever) to reach a safe landing (arriving at the Tower). The airplane is also allowed two &quot;brushes&quot;-limited contact with an obstacle. The third brush or a direct hit or stepping on something directly causes a &quot;crash&quot;. They may step around, over or under the obstacles. Also, the airplane can only fly forward. It can turn in any direction, however. The directions must be given from the pilot`s point of view, a good exercise for fledgling directors. You can also destroy all the trust you`ve built up in your class by completely clearing the deck and torturing the Pilot. Believe us someone will suggest it.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>3</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AliBaba</string>
			<key>Title</key>
			<string>Ali Baba and the 40 Thieves</string>
			<key>Description</key>
			<string>Excellent warm-up. Everyone in a circle. We are going to establish a rhythm by saying, all together `Ali Baba and the 40 Thieves`. Keep repeating this. One person starts making a gesture to this rhythm, say, tapping your head with you left hand. When the sentence is repeated, the player next to her takes over this gesture, while the first one starts a completely different new gesture. Third time the sentence is done, player three does the first gesture, player two does the second gesture and player one invents a new one again. And so on. This is also a concentration game, though it`s not really difficult. All one has to do is watch the previous player, and next time, take over her gesture. When you`re watching what everyone else is doing you`re going to get lost though.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Energy</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AlienTigerCow</string>
			<key>Title</key>
			<string>Alien Tiger Cow</string>
			<key>Description</key>
			<string>Fun game to warm up and to teach players some  Chivalry. Everyone in a circle. There are 3 things a player can be An alien: hold you index fingers up next to your head, as little antenna`s and say `Bleeb bleeb`, bending inwards into the circle A cow: bend forward, hold your right hand on your tummy and go `Moooo` A tiger: push your right hand forward, imitating a claw and roar. On your sign, every player decides to become one of the three. The idea is for everyone to become the same, which obviously won`t be the case, the first time. We re-do this until everyone is in sync. </string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>5</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Excluding</string>
			<key>Title</key>
			<string>Excluding</string>
			<key>Description</key>
			<string>At least 4 players play a scene, in which one of the players gets excluded. Notes This is a group exercise, in the sense that players should be sensing where the majority of the group is going (see  Alien Tiger Cow ). Tell players not to be afraid of `being nasty` - be extreme in your exclusion (that makes it easier, also for the player that is excluded - see  Mr. Nice Guy ). Whoever gets excluded should gladly accept this and react accordingly. Excluded players can go to extremes to be re-included - hilariously funny if even this is thoroughly ignored by the others.
-This game was originally created as a pattern game for long form shows at the Theatresports London Impro Lab in the late 1980`s. The whole point of the game is NOT to actively try and exclude anyone. The exclusion of one player should happen as a result of the other players making alliances with one another. If you don`t do this, the scene doesn`t form very good patterns and the players get too competitive. You also miss the slow, sliding status drops and the desperate attempts to hook into an existing alliance, that happen when a player is starting to realize that they are being excluded. A good way to start this game would be start in a black-out seated round a table While the lights are still down the entire ensemble starts to laugh (as if someone has just told the punchline to a hilarious joke) The lights slowly fade up as the cast`s laughter winds down and the alliances begin to form. By the end of the scene, which climaxes in a final, dramatic exclusion, we usually end up with four to six threads and a clear protagonist.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>3</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AllIntro</string>
			<key>Title</key>
			<string>Alliteration Introduction</string>
			<key>Description</key>
			<string>Excellent game for players to get to know each other`s names. Everyone in a circle. A player starts the game by introducing himself by making a gesture, and alliterating to his name, e.g. &quot;I`m Wonderful Wendy&quot; or &quot;I`m Smart Steve&quot;. The next player point to the first, repeats the previous player`s name, attribute and gesture, and does something similar about himself. And so on. Game ends with the first player having to do each other player`s gesture, repeating their names and attributes.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Icebreaker</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Alliterations</string>
			<key>Title</key>
			<string>Alliterations</string>
			<key>Description</key>
			<string>You will need a tennis ball or a towel tied in a knot for this one. Everyone sitting or standing in a circle. You give one person the ball, and ask him to name as many words as possible that start with a `P` (or any other letter) in the time it takes for the ball to get passed along the circle. Doubles don`t count, obviously. Notes: Tell players not to watch the ball go round when they`re `it` - they`ll just panic and freeze. Tell them to try this with closed eyes.</string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Warm-up</string>
				<string>Prop</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AlphaCircle</string>
			<key>Title</key>
			<string>Alphabet Circle</string>
			<key>Description</key>
			<string>Great warm-up game to sharpen concentration. Everyone in a circle. One player starts by throwing an `A` to another player. That player throws as fast as possible a `B` to someone else. And so on. If you work with a large group, you can divide them into 2 circles, call `em Team Gold and Team Silver, and time how fast they can get to `Z`.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AlphabetGame</string>
			<key>Title</key>
			<string>Alphabet Game</string>
			<key>Description</key>
			<string>This is a scene consisting of 26 lines of dialog. The first line starts with a given letter (say `R`). The reply to that line must start with a `S`, and so on, until the whole alphabet has been covered. After `Z` comes `A`. Players that hesitate, or use the wrong letter `Die`, and are replaced by another player. The replacement needs to take over the character of the player she replaces. Notes: Urge players not to `stick` to the game - if you can`t think of a good sentence to advance the story, it`s better to just `die` than to screw up the story (see  Chivalry).</string>
			<key>Tags</key>
			<array>
				<string>Die</string>
				<string>Performance</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AlphaLetters</string>
			<key>Title</key>
			<string>Alphabet Letters</string>
			<key>Description</key>
			<string>Players in groups of 4 or 5. When a letter is called, each group forms that letter with their bodies.</string>
			<key>Tags</key>
			<array>
				<string>Energy</string>
				<string>Icebreaker</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>12</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Asides</string>
			<key>Title</key>
			<string>Asides</string>
			<key>Description</key>
			<string>An improvized scene is played, which any player can stop at any time by yelling freeze. At that point, the player steps out of the scene, and tells the audience what his character is really thinking, after which the scene continues. The other characters of course are not supposed to know what players are thinking, but the players do,and should use this.Notes: Players can use this to reveal their hidden motives. Other players can play into this, or purposely ignore this knowledge. Gimmick: characters may actually have other things on their minds than what`s going on in the scene. E.g. a driver stopped by a cop may be thinking about the groceries his wife told him to get at the supermarket.</string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>AmericanIdol</string>
			<key>Title</key>
			<string>American Idol</string>
			<key>Description</key>
			<string>This is a spoof of the format of (American) Idol, the TV show in which new singers are discovered. One player is the host, another is the bad judge, and at least 2 others are candidates. Both candidates introduce themselves (or are introduced by the host) and then sing their song based on an audience suggestion. Afterwards the judge tears them apart.</string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
				<string>SingSong</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>12</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>WhatHappensNext</string>
			<key>Title</key>
			<string>What Happens Next</string>
			<key>Description</key>
			<string>One player in the middle, the others sit aside. Any person can give the middle player a task, which she performs, and then she asks `What happens next` ? Any player may suggest what needs to happen next, but the idea is for the group to construct a coherent story. Notes: The player in the middle should only and strictly be doing what she`s told, it is up to the players at the side to construct the story.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
				<string>Narration</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Animalistics</string>
			<key>Title</key>
			<string>Animalistics</string>
			<key>Description</key>
			<string>Ask the audience for animals. Players play a scene, in which the characters are based on these animals. Notes Players do not `become` the animals, they only take over characteristics of the animals. Characteristics may be physical, vocal or  Status based. For example, `chicken` might inspire a player to a cowardly character, moving about jerkily.</string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Characters</string>
				<string>Exercise</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Animals</string>
			<key>Title</key>
			<string>Animals</string>
			<key>Description</key>
			<string>Make sure you have an even number of players. Give everyone an animal, but make sure that there are 2 of each, and that nobody knows which other player is which animal. Then give a number of activities, which the animals perform. Try Eating. Eating when you`re really hungry Drinking. Drinking when you`re really thirsty Lovemaking Grooming Fighting Sleeping At the end, ask the players to find the other animal of their kind. Ask the others if they found out who was which animal.</string>
			<key>Tags</key>
			<array>
				<string>Characters</string>
				<string>Exercise</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Armando</string>
			<key>Title</key>
			<string>Armando</string>
			<key>Description</key>
			<string>This is a long form, named after its creator, Chicago Improv teacher and player Armando Diaz. This improv format starts with a storytelling-style monologue, based on an audience suggestion. After the monologue, players play improvized scenes inspired by the monologue, and the monologue may even continue, later on in the performance.</string>
			<key>Tags</key>
			<array>
				<string>Long Form</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Helping</string>
			<key>Title</key>
			<string>Helping Hands</string>
			<key>Description</key>
			<string>A scene is played in a minimum of 2 pairs, each pair acting as one character. The first player in the pair, who does the voice, holds his hands behind his back. The second player stands behind player 1, and provides the `hands`. The story should be a give and take between voices and hands.</string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>ArtistModelClay</string>
			<key>Title</key>
			<string>Artist Model Clay</string>
			<key>Description</key>
			<string>3 players. One is a lump of clay - behind her is a second player who is a model. Model takes a pose, which the `clay` is not supposed to see. The third player becomes the artist, who will model the clay after the model. The artist is not supposed to touch the clay, can`t speak and it not allowed to show the clay what to do or to become. When done, let the model inspect the artwork and see if details fit.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>3</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Assassin</string>
			<key>Title</key>
			<string>Assassin</string>
			<key>Description</key>
			<string>Great warm-up for a group of 7+ people. Everyone picks someone to be their bodyguard, and somebody to be their assassin. Don`t say out loud who picked who for what. Game starts, and everyone tries to protect themselves from their assassin, by trying to keep their bodyguard between themselves and their assassin. After several minutes of chaos everyone reveals who was picked for what.</string>
			<key>Tags</key>
			<array>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>7</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Association</string>
			<key>Title</key>
			<string>Association Jump</string>
			<key>Description</key>
			<string>This is physical association game. All plays mill about the room. At any time, trainer yells a player`s name. That player `jumps` into a frozen position. Trainer can (but does not have to) sidecoach by shouting `directions` (see  Fast Food Laban ) like `horizontal`, `up`, `down`, `sideways`, `big`, `small`, `light`, `heavy`. The other players watch our subject jump into a position, and then build around that player, inspired by whatever the frozen position out subject jumped into. The end result is a still scene. Tip: precede this exercise by Jump.</string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Exercise</string>
				<string>Group</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Narrator</string>
			<key>Title</key>
			<string>Narrator</string>
			<key>Description</key>
			<string>This improv format is like Typewriter without the typewriter: players improvise a scene, which a narrator describes and comments upon.</string>
			<key>Tags</key>
			<array>
				<string>Narration</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>3</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Feature</string>
			<key>Title</key>
			<string>Feature Film</string>
			<key>Description</key>
			<string>This is a collection of improvized scenes, all based around (the making of) a movie. One character we definitely have in this improv format is a Director, who can direct the players to re-play poorly played scene, and who can offer parts of the storyline or  Tilts. before they actually get played. Apart from seeing the scenes from the movie itself, we can (but don`t have to) see scenes of what is going on behind the scenes (so you can have a totally different sub-plot going on there, if you want).</string>
			<key>Tags</key>
			<array>
				<string>Long Form</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Audience</string>
			<key>Title</key>
			<string>Audience Warm-ups</string>
			<key>Description</key>
			<string>Often an improv show starts with an audience warm-up. Here are some suggestions Do a Mexican wave (audience making fluent waves with their hands above their head). Have he pianist/keyboard man make all kinds of sounds and have the audience imitate them Ask the audience to stand up and do some physical warm-up. Have them shake their arms and legs. Have the audience introduce themselves to strangers, tell a secret their spouse/partner doesn`t know about to a stranger, have them hug a stranger, tell your neighbor waht you ate today, your pin code Do an interview with the audience, where the MC is one character (say, a headmaster) and all of the audience another (say a naughty child). The audience needs to reply to the interview in one voice (all saying the same at the same time - see  One Mouth Not an easy one, and if the audience does not feel like doing this it really sucks. When it works it`s a real thrill. divide the audience in 3 or 4 groups, and give each group a sound. Rehearse the sound with each group. Then tell a silly story, and use these sounds as sound effects. (We saw a pretty gruesome one in which one group was a car (roar), another a dog (bark) and the third group got a kind of splashing sound. The poor dog got run over by the car... not exactly nice but the audience had fun with it) Do a cheering competition between the men and the women. Rehearse different kinds of applause (from the `polite` applause when a scene sucks, over an `ooh` applause for a touching scene, to a wild roar for a hilarious scene). Have them rehearse voting for a team by cheering the team name (if that`s your format). Rehearse a `Die` ( see  Die ) if i you`re going to be playing scenes in which the audience can decide to throw a player out of the game. Give the men and the women a different sound and play with that. Tell them they are members of a wild tribe, the women go `Ugh` when you raise your left hand and the man go `Hagawaga` when you raise your right hand.</string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Automatic</string>
			<key>Title</key>
			<string>Automatic Storytelling</string>
			<key>Description</key>
			<string>This is an exercise you can only do once with a group. Use the exercise to show that making stories is not all that difficult. Split the group in 2. Half of the players leave the room while you explain the game to the others: we are going to make stories in pairs. We will tell the other players that we came up with a great story, and they have to guess it. The catch is that they can only ask yes/no questions, and we do not really have a story. We will answer `no` to every question that starts with a vowel or with a conjugation of `to be` (or some other criterion). In addition, after having answered 2 consecutive No`s we will always answer a yes. Let the other players back in and pair them up with the others. Each couple starts guessing the story, unknowingly creating a story as they go. Continue till they get it. Origin :This exercise is described by  Keith Johnstone in  Impro for Storytellers.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Narration</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BackDancing</string>
			<key>Title</key>
			<string>Back Dancing</string>
			<key>Description</key>
			<string>Played in pairs. Actors stand back to back, and dance on different kinds of music. Back must stay in touch at all times.</string>
			<key>Tags</key>
			<array>
				<string>Exercise</string>
				<string>Group</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>BackwardsInterview</string>
			<key>Title</key>
			<string>Backwards Interview</string>
			<key>Description</key>
			<string>To play this improv game, ask for a topic for a TV interview. Then 2 players do the interview backwards. That means that the first sentence uttered is the last one in the interview, perhaps something like: Thanks for that enlightening explanation. (to the guest) To all of you viewers at home, thank you for watching, and see you next week. And then players work their way backwards. Various gimmicks can be played. For example, in your responses, you can pimp players. Examples would be: &quot;Thank you for that very energetic answer to the question&quot;, pimping the other player to do something very energetic.</string>
			<key>Tags</key>
			<array>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>2</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>SceneReplay</string>
			<key>Title</key>
			<string>Scene Replay</string>
			<key>Description</key>
			<string>Ask at least 2 players to play a short scene. One could limit the scene to 8 lines of dialog per player. Then ask the players to replay the scene, based on some audience suggestions for: A particular emotion. An era. A different location. A film / TV / literature style. In Gibberish backwards.</string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
				<string>Replay</string>
				<string>Timed</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>2</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>JanusDance</string>
			<key>Title</key>
			<string>Janus Dance</string>
			<key>Description</key>
			<string>This is can be used as a Trust exercise, as well as in performance. 2 players perform a slow dance together, each with their head on the other`s shoulder. Hence they are not looking at each other. While dancing they perform a 2-3 minute scene. This gives for great listening practice, since players aren`t looking at their partners. If is also good for overcoming (physical) awkwardness between partners that are not familiar. And it is a great exercise for physical work in the dance, as in physical expression of the character`s feelings.</string>
			<key>Tags</key>
			<array>
				<string>Look and Listen</string>
				<string>Performance</string>
				<string>Trust</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>2</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>4</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Balladeer</string>
			<key>Title</key>
			<string>Balladeer(1)</string>
			<key>Description</key>
			<string>In this musical improv handle, one player is the balladeer, who starts singing a ballad about an audience suggestion. The other players actually play what the balladeer sings about, in slow motion. This is actually group story-building, as the players are inspired by the what the balladeer sings (obviously) but also, their actions can/should inspire the balladeer. Notes: You`re not limited to ballads, of course. Origin: The Improvoholics.</string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
				<string>SingSong</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Balla2</string>
			<key>Title</key>
			<string>Balladeer(2)</string>
			<key>Description</key>
			<string>This is like the short form version  Balladeer(1), but in this long form improv format, as soon as the balladeer stops singing or finishes the song, the characters start playing and talking independently. When their scene is done the balladeer starts a new song, and so forth.</string>
			<key>Tags</key>
			<array>
				<string>Long Form</string>
				<string>Performance</string>
				<string>SingSong</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Bandaid</string>
			<key>Title</key>
			<string>Bandaid Tag</string>
			<key>Description</key>
			<string>One person is &quot;it.&quot; Whenever someone is tagged by &quot;it&quot; they must hold a bandaid (their hand) on the spot where they were tagged. Then the game continues. When someone runs out of bandaids, (they get tagged three times), they are frozen until two other people come over to them and &quot;operate.&quot; The two other people need to tag the frozen person at the same time and count to five.</string>
			<key>Tags</key>
			<array>
				<string>Energy</string>
				<string>Icebreakers</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>6</integer>
			<key>MaxPlayers</key>
			<integer>20</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>5</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Bop1</string>
			<key>Title</key>
			<string>Bibbety Bop(1)</string>
			<key>Description</key>
			<string>Silly warm-up to get the blood flowing. A players in a circle, one player in the middle. The player in the middle closes his eyes, holds right hand pointing in front of him, and spins around. When done spinning, open your eyes and say, as fast as you can `Bippety Bippety Bop`. The player you`re pointing to, and his 2 neighbors, need to build an elephant in less than the time the middle player needs to say `Bippety Bippety Bop`. An elephant consists of a trunk, made by the middle player, by holding your nose with one hand, and extending your other arm through the arm that holds the hand that holds the nose (does this make any sense?). The neighboring players each form a big ear, using both arms. Don`t forget to attach the ears to the elephant`s head. Any player that cannot get his/her part done by the time the middle player does `Bippety Bippety Bop` becomes `it` and takes place in the middle of the circle.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Bop2</string>
			<key>Title</key>
			<string>Bippety Bop(2)</string>
			<key>Description</key>
			<string>This is a variation on Bippety Bop(1) : all players in a circle, one player in the middle who is `it`. This player picks a player in the circle and yells `bippety-bippety-bop` at her. If he manages to get to `bop` before she can say `bop`, she becomes `it`. See variations for more ideas.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Barney</string>
			<key>Title</key>
			<string>Barney</string>
			<key>Description</key>
			<string>Silly warm-up game. Everyone in a circle, one person as a `caller` in the middle. Caller yells a letter to one of the players, that player must come up with a name of a person, an object or a service that can be sold, and a location, all starting with the letter given. Example would be `B` which leads to &quot;Barney sells Bread in Bulgaria&quot;. Anything goes, as long as it comes out right away, if not the player becomes caller.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Exercise</string>
				<string>Spontaneity</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>10</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>3</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Barnyard</string>
			<key>Title</key>
			<string>Barnyard</string>
			<key>Description</key>
			<string>Each person is given the name of an animal with approximately three-five people having the same animal. Spread the group across the room. No one is allowed to tell which animal he is. At the signal each person makes the noise of the animal that he has been given. The first group to find all of their animals and sit down are the winners.</string>
			<key>Tags</key>
			<array>
				<string>Energy</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>12</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>8</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Bartender</string>
			<key>Title</key>
			<string>Bartender</string>
			<key>Description</key>
			<string>A silly Short Form handle: ask for a silly problem. Player 1 goes into a bar and explains his woes to the bartender in an improvized song. The bartender then fixes the problem in another improvized song. See also: Three Melodies.</string>
			<key>Tags</key>
			<array>
				<string>Performance</string>
				<string>SingSong</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>4</integer>
			<key>MinTime</key>
			<integer>1</integer>
			<key>MaxTime</key>
			<integer>5</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Catch</string>
			<key>Title</key>
			<string>Catch&apos;em</string>
			<key>Description</key>
			<string>One player is `it` and stands at one end of the room, facing the wall. The other players at the other end of the room. Players need to try and get to the player who is `it` without `it` seeing them move. The player who is `it` can turn around at any time - at that point everybody else needs to freeze. Anyone who is caught moving is out.</string>
			<key>Tags</key>
			<array>
				<string>Concentration</string>
				<string>Energy</string>
				<string>Exercise</string>
				<string>Warm-up</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>6</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Beatnik</string>
			<key>Title</key>
			<string>Beatnik Poet</string>
			<key>Description</key>
			<string>Tell the audience we are going to improvise a bad poetry night at pseudo intellectual coffee house. Ask for 2 unrelated objects or concepts. All players perform a poem that has both suggestions. If they miss out a suggestion or if they don`t rhyme, the audience yells Die! and the player commits suicide on stage.</string>
			<key>Tags</key>
			<array>
				<string>Die</string>
				<string>Limitations</string>
				<string>Performance</string>
			</array>
			<key>MinPlayers</key>
			<integer>2</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>2</integer>
			<key>MaxTime</key>
			<integer>10</integer>
			<key>AudienceParticipation</key>
			<true/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
		<dict>
			<key>Image</key>
			<string>Become</string>
			<key>Title</key>
			<string>Become</string>
			<key>Description</key>
			<string>This one can be player with all players at a time, or you can ask the group to watch as players come up with different ideas on how to do this. Ask the players to become-- A jar of mayonnaise. A pack of cigarettes. Dentures. At first, this will probably not lead to much. Add side coachings, like: You are a jar of mayonnaise. Opened or not? Full or empty? Fresh or not? Show it. You are a pack of smokes. Empty or full? Filter cigarettes or not? Where are you? In someone`s pocket or on a shelve in a shop? Show it. You are a flower. What kind of flower? Blooming or not? In a vase or in a field? What color? Freshly picked or not? A present to a lover or at a funeral? You are water. Still or not? In a glass? A jar, a puddle, a lake or an ocean? Fresh or dirty? You are stone, air, sand, fire. Your are blue, red, green. You are a clock. Big Ben or grandfather clock? Working or not. Is your time right or not? A watch? Who is wearing you? A nun or a pimp? How could you show that? You are French fries. McDonalds or Wendy`s? Hot or cold? Any ketchup? On a plate or in a cardboard box? Eaten or not? Yummy or yuck? After a while, players should be able to come up with the side coachings for themselves. Encourage the players to try out different kind of stuff, see what they come up with.</string>
			<key>Tags</key>
			<array>
				<string>Association</string>
				<string>Exercise</string>
				<string>Spontaneity</string>
			</array>
			<key>MinPlayers</key>
			<integer>4</integer>
			<key>MaxPlayers</key>
			<integer>0</integer>
			<key>MinTime</key>
			<integer>4</integer>
			<key>MaxTime</key>
			<integer>20</integer>
			<key>AudienceParticipation</key>
			<false/>
			<key>timerCountsUp</key>
			<true/>
			<key>Buzzer</key>
			<false/>
			<key>Variations</key>
			<array/>
		</dict>
	</array>
</dict>
</plist>
